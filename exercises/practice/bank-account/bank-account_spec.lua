local BankAccount = require('bank-account')

describe('bank-account', function()
  it('newly opened account has zero balance', function()
    local account = BankAccount:new()
    account:open()
    assert.equal(0, account:balance())
  end)

  it('single deposit', function()
    local account = BankAccount:new()
    account:open()
    account:deposit(100)
    assert.equal(100, account:balance())
  end)

  it('multiple deposits', function()
    local account = BankAccount:new()
    account:open()
    account:deposit(100)
    account:deposit(50)
    assert.equal(150, account:balance())
  end)

  it('withdraw once', function()
    local account = BankAccount:new()
    account:open()
    account:deposit(100)
    account:withdraw(75)
    assert.equal(25, account:balance())
  end)

  it('withdraw twice', function()
    local account = BankAccount:new()
    account:open()
    account:deposit(100)
    account:withdraw(80)
    account:withdraw(20)
    assert.equal(0, account:balance())
  end)

  it('can do multiple operations sequentially', function()
    local account = BankAccount:new()
    account:open()
    account:deposit(100)
    account:deposit(110)
    account:withdraw(200)
    account:deposit(60)
    account:withdraw(50)
    assert.equal(20, account:balance())
  end)

  it('cannot check balance of closed account', function()
    local account = BankAccount:new()
    account:open()
    account:close()
    assert.has_error(function()
      account:balance()
    end)
  end)

  it('cannot deposit into closed account', function()
    local account = BankAccount:new()
    account:open()
    account:close()
    assert.has_error(function()
      account:deposit(50)
    end)
  end)

  it('cannot deposit into unopened account', function()
    local account = BankAccount:new()
    assert.has_error(function()
      account:deposit(50)
    end)
  end)

  it('cannot withdraw from closed account', function()
    local account = BankAccount:new()
    account:open()
    account:close()
    assert.has_error(function()
      account:withdraw(50)
    end)
  end)

  it('cannot close an account that was not opened', function()
    local account = BankAccount:new()
    assert.has_error(function()
      account:close()
    end)
  end)

  it('cannot open an already opened account', function()
    local account = BankAccount:new()
    account:open()
    assert.has_error(function()
      account:open()
    end)
  end)

  it('reopened account does not retain balance', function()
    local account = BankAccount:new()
    account:open()
    account:deposit(50)
    account:close()
    account:open()
    assert.equal(0, account:balance())
  end)

  it('cannot withdraw more than deposited', function()
    local account = BankAccount:new()
    account:open()
    account:deposit(25)
    assert.has_error(function()
      account:withdraw(50)
    end)
  end)

  it('cannot withdraw negative', function()
    local account = BankAccount:new()
    account:open()
    account:deposit(100)
    assert.has_error(function()
      account:withdraw(-50)
    end)
  end)

  it('cannot deposit negative', function()
    local account = BankAccount:new()
    account:open()
    assert.has_error(function()
      account:deposit(-50)
    end)
  end)
end)
