local LinkedList = require('linked-list')

describe('linked-list', function()
  it('pop gets element from the list', function()
    local list = LinkedList()
    list:push(7)
    assert.equal(7, list:pop())
  end)

  it('push/pop respectively add/remove at the end of the list', function()
    local list = LinkedList()
    list:push(11)
    list:push(13)
    assert.equal(13, list:pop())
    assert.equal(11, list:pop())
  end)

  it('shift gets an element from the list', function()
    local list = LinkedList()
    list:push(17)
    assert.equal(17, list:shift())
  end)

  it('shift gets first element from the list', function()
    local list = LinkedList()
    list:push(23)
    list:push(5)
    assert.equal(23, list:shift())
    assert.equal(5, list:shift())
  end)

  it('unshift adds element at start of the list', function()
    local list = LinkedList()
    list:unshift(23)
    list:unshift(5)
    assert.equal(5, list:shift())
    assert.equal(23, list:shift())
  end)

  it('pop, push, shift, and unshift can be used in any order', function()
    local list = LinkedList()
    list:push(1)
    list:push(2)
    assert.equal(2, list:pop())
    list:push(3)
    assert.equal(1, list:shift())
    list:unshift(4)
    list:push(5)
    assert.equal(4, list:shift())
    assert.equal(5, list:pop())
    assert.equal(3, list:shift())
  end)

  it('count an empty list', function()
    local list = LinkedList()
    assert.equal(0, list:count())
  end)

  it('count a list with items', function()
    local list = LinkedList()
    list:push(37)
    list:push(1)
    assert.equal(2, list:count())
  end)

  it('count is correct after mutation', function()
    local list = LinkedList()
    list:push(31)
    assert.equal(1, list:count())
    list:unshift(43)
    assert.equal(2, list:count())
    list:shift()
    assert.equal(1, list:count())
    list:pop()
    assert.equal(0, list:count())
  end)

  it('popping to empty doesn\'t break the list', function()
    local list = LinkedList()
    list:push(41)
    list:push(59)
    list:pop()
    list:pop()
    list:push(47)
    assert.equal(1, list:count())
    assert.equal(47, list:pop())
  end)

  it('shifting to empty doesn\'t break the list', function()
    local list = LinkedList()
    list:push(41)
    list:push(59)
    list:shift()
    list:shift()
    list:push(47)
    assert.equal(1, list:count())
    assert.equal(47, list:shift())
  end)

  it('deletes the only element', function()
    local list = LinkedList()
    list:push(61)
    list:delete(61)
    assert.equal(0, list:count())
  end)

  it('deletes the element with the specified value from the list', function()
    local list = LinkedList()
    list:push(71)
    list:push(83)
    list:push(79)
    list:delete(83)
    assert.equal(2, list:count())
    assert.equal(79, list:pop())
    assert.equal(71, list:shift())
  end)

  it('deletes the element with the specified value from the list, re-assigns tail', function()
    local list = LinkedList()
    list:push(71)
    list:push(83)
    list:push(79)
    list:delete(83)
    assert.equal(2, list:count())
    assert.equal(79, list:pop())
    assert.equal(71, list:pop())
  end)

  it('deletes the element with the specified value from the list, re-assigns head', function()
    local list = LinkedList()
    list:push(71)
    list:push(83)
    list:push(79)
    list:delete(83)
    assert.equal(2, list:count())
    assert.equal(71, list:shift())
    assert.equal(79, list:shift())
  end)

  it('deletes the first of two elements', function()
    local list = LinkedList()
    list:push(97)
    list:push(101)
    list:delete(97)
    assert.equal(1, list:count())
    assert.equal(101, list:pop())
  end)

  it('deletes the second of two elements', function()
    local list = LinkedList()
    list:push(97)
    list:push(101)
    list:delete(101)
    assert.equal(1, list:count())
    assert.equal(97, list:pop())
  end)

  it('delete does not modify the list if the element is not found', function()
    local list = LinkedList()
    list:push(89)
    list:delete(103)
    assert.equal(1, list:count())
  end)

  it('deletes only the first occurrence', function()
    local list = LinkedList()
    list:push(73)
    list:push(9)
    list:push(9)
    list:push(107)
    list:delete(9)
    assert.equal(3, list:count())
    assert.equal(107, list:pop())
    assert.equal(9, list:pop())
    assert.equal(73, list:pop())
  end)
end)
