local School = require('grade-school')

describe('grade-school', function()
  it('roster is empty when no student is added', function()
    local school = School:new()
    assert.are.same({}, school:roster())
  end)

  it('add a student', function()
    local school = School:new()
    assert.is_true(school:add('Aimee', 2))
  end)

  it('student is added to the roster', function()
    local school = School:new()
    school:add('Aimee', 2)
    assert.are.same({ 'Aimee' }, school:roster())
  end)

  it('adding multiple students in the same grade in the roster', function()
    local school = School:new()
    assert.is_true(school:add('Blair', 2))
    assert.is_true(school:add('James', 2))
    assert.is_true(school:add('Paul', 2))
  end)

  it('multiple students in the same grade are added to the roster', function()
    local school = School:new()
    school:add('Blair', 2)
    school:add('James', 2)
    school:add('Paul', 2)
    assert.are.same({ 'Blair', 'James', 'Paul' }, school:roster())
  end)

  it('cannot add student to same grade in the roster more than once', function()
    local school = School:new()
    assert.is_true(school:add('Blair', 2))
    assert.is_true(school:add('James', 2))
    assert.is_false(school:add('James', 2))
    assert.is_true(school:add('Paul', 2))
  end)

  it('student not added to same grade in the roster more than once', function()
    local school = School:new()
    school:add('Blair', 2)
    school:add('James', 2)
    school:add('James', 2)
    school:add('Paul', 2)
    assert.are.same({ 'Blair', 'James', 'Paul' }, school:roster())
  end)

  it('adding students in multiple grades', function()
    local school = School:new()
    assert.is_true(school:add('Chelsea', 3))
    assert.is_true(school:add('Logan', 7))
  end)

  it('students in multiple grades are added to the roster', function()
    local school = School:new()
    school:add('Chelsea', 3)
    school:add('Logan', 7)
    assert.are.same({ 'Chelsea', 'Logan' }, school:roster())
  end)

  it('cannot add same student to multiple grades in the roster', function()
    local school = School:new()
    assert.is_true(school:add('Blair', 2))
    assert.is_true(school:add('James', 2))
    assert.is_false(school:add('James', 3))
    assert.is_true(school:add('Paul', 3))
  end)

  it('student not added to multiple grades in the roster', function()
    local school = School:new()
    school:add('Blair', 2)
    school:add('James', 2)
    school:add('James', 3)
    school:add('Paul', 3)
    assert.are.same({ 'Blair', 'James', 'Paul' }, school:roster())
  end)

  it('students are sorted by grades in the roster', function()
    local school = School:new()
    school:add('Jim', 3)
    school:add('Peter', 2)
    school:add('Anna', 1)
    assert.are.same({ 'Anna', 'Peter', 'Jim' }, school:roster())
  end)

  it('students are sorted by name in the roster', function()
    local school = School:new()
    school:add('Peter', 2)
    school:add('Zoe', 2)
    school:add('Alex', 2)
    assert.are.same({ 'Alex', 'Peter', 'Zoe' }, school:roster())
  end)

  it('students are sorted by grades and then by name in the roster', function()
    local school = School:new()
    school:add('Peter', 2)
    school:add('Anna', 1)
    school:add('Barb', 1)
    school:add('Zoe', 2)
    school:add('Alex', 2)
    school:add('Jim', 3)
    school:add('Charlie', 1)
    assert.are.same({ 'Anna', 'Barb', 'Charlie', 'Alex', 'Peter', 'Zoe', 'Jim' }, school:roster())
  end)

  it('grade is empty if no students in the roster', function()
    local school = School:new()
    assert.are.same({}, school:grade(1))
  end)

  it('grade is empty if no students in that grade', function()
    local school = School:new()
    school:add('Peter', 2)
    school:add('Zoe', 2)
    school:add('Alex', 2)
    school:add('Jim', 3)
    assert.are.same({}, school:grade(1))
  end)

  it('student not added to same grade more than once', function()
    local school = School:new()
    school:add('Blair', 2)
    school:add('James', 2)
    school:add('James', 2)
    school:add('Paul', 2)
    assert.are.same({ 'Blair', 'James', 'Paul' }, school:grade(2))
  end)

  it('student not added to multiple grades', function()
    local school = School:new()
    school:add('Blair', 2)
    school:add('James', 2)
    school:add('James', 3)
    school:add('Paul', 3)
    assert.are.same({ 'Blair', 'James' }, school:grade(2))
  end)

  it('student not added to other grade for multiple grades', function()
    local school = School:new()
    school:add('Blair', 2)
    school:add('James', 2)
    school:add('James', 3)
    school:add('Paul', 3)
    assert.are.same({ 'Paul' }, school:grade(3))
  end)

  it('students are sorted by name in a grade', function()
    local school = School:new()
    school:add('Franklin', 5)
    school:add('Bradley', 5)
    school:add('Jeff', 1)
    assert.are.same({ 'Bradley', 'Franklin' }, school:grade(5))
  end)
end)
